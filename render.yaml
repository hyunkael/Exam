services:
  # Option 1: Deploy as separate services (recommended for production)
  
  # CRM Staging Service
  - type: worker
    name: crm-staging-service
    env: python
    buildCommand: pip install -r requirements.txt
    startCommand: python crm_staging_service.py
    envVars:
      - key: PYTHON_VERSION
        value: 3.9.0

  # ERP Staging Service
  - type: worker
    name: erp-staging-service
    env: python
    buildCommand: pip install -r requirements.txt
    startCommand: python erp_staging_service.py
    envVars:
      - key: PYTHON_VERSION
        value: 3.9.0
    # This service depends on the CRM staging service
    # It will only start after the CRM service is deployed
    dependsOn:
      - crm-staging-service

  # Data Warehouse Service
  - type: worker
    name: data-warehouse-service
    env: python
    buildCommand: pip install -r requirements.txt
    startCommand: python data_warehouse_service.py
    envVars:
      - key: PYTHON_VERSION
        value: 3.9.0
    # This service depends on both staging services
    # It will only start after both staging services are deployed
    dependsOn:
      - crm-staging-service
      - erp-staging-service

  # Dashboard Web Service
  - type: web
    name: sales-dashboard
    env: python
    buildCommand: pip install -r requirements.txt
    startCommand: streamlit run dashboard.py --server.port $PORT --server.address 0.0.0.0
    envVars:
      - key: PYTHON_VERSION
        value: 3.9.0
    # This service depends on the data warehouse service
    # It will only start after the data warehouse service is deployed
    dependsOn:
      - data-warehouse-service

  # Option 2: Deploy as a single service (alternative approach)
  # Uncomment this and comment out the above services if you prefer this approach
  
  # - type: web
  #   name: data-pipeline-all-in-one
  #   env: python
  #   buildCommand: pip install -r requirements.txt
  #   startCommand: python run_all.py
  #   envVars:
  #     - key: PYTHON_VERSION
  #       value: 3.9.0
